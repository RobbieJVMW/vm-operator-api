// Copyright (c) 2020 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/vm-operator-api/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineSetResourcePolicyLister helps list VirtualMachineSetResourcePolicies.
type VirtualMachineSetResourcePolicyLister interface {
	// List lists all VirtualMachineSetResourcePolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSetResourcePolicy, err error)
	// VirtualMachineSetResourcePolicies returns an object that can list and get VirtualMachineSetResourcePolicies.
	VirtualMachineSetResourcePolicies(namespace string) VirtualMachineSetResourcePolicyNamespaceLister
	VirtualMachineSetResourcePolicyListerExpansion
}

// virtualMachineSetResourcePolicyLister implements the VirtualMachineSetResourcePolicyLister interface.
type virtualMachineSetResourcePolicyLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineSetResourcePolicyLister returns a new VirtualMachineSetResourcePolicyLister.
func NewVirtualMachineSetResourcePolicyLister(indexer cache.Indexer) VirtualMachineSetResourcePolicyLister {
	return &virtualMachineSetResourcePolicyLister{indexer: indexer}
}

// List lists all VirtualMachineSetResourcePolicies in the indexer.
func (s *virtualMachineSetResourcePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSetResourcePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineSetResourcePolicy))
	})
	return ret, err
}

// VirtualMachineSetResourcePolicies returns an object that can list and get VirtualMachineSetResourcePolicies.
func (s *virtualMachineSetResourcePolicyLister) VirtualMachineSetResourcePolicies(namespace string) VirtualMachineSetResourcePolicyNamespaceLister {
	return virtualMachineSetResourcePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineSetResourcePolicyNamespaceLister helps list and get VirtualMachineSetResourcePolicies.
type VirtualMachineSetResourcePolicyNamespaceLister interface {
	// List lists all VirtualMachineSetResourcePolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSetResourcePolicy, err error)
	// Get retrieves the VirtualMachineSetResourcePolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VirtualMachineSetResourcePolicy, error)
	VirtualMachineSetResourcePolicyNamespaceListerExpansion
}

// virtualMachineSetResourcePolicyNamespaceLister implements the VirtualMachineSetResourcePolicyNamespaceLister
// interface.
type virtualMachineSetResourcePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineSetResourcePolicies in the indexer for a given namespace.
func (s virtualMachineSetResourcePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineSetResourcePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineSetResourcePolicy))
	})
	return ret, err
}

// Get retrieves the VirtualMachineSetResourcePolicy from the indexer for a given namespace and name.
func (s virtualMachineSetResourcePolicyNamespaceLister) Get(name string) (*v1alpha1.VirtualMachineSetResourcePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmachinesetresourcepolicy"), name)
	}
	return obj.(*v1alpha1.VirtualMachineSetResourcePolicy), nil
}
